import numpy as np
from PIL import Image
from resources.gee.vis_handler_utils import array_to_image
import os
import math


def get_npy_path(tif_path):
    """
    Modifies the path of a TIF file to find the corresponding .dnbr.npy file
    This file should have been generated by calculating the difference in nbr between the given tif file and
    data from an picture taken (n) days before
    :param tif_path: the relative path to a .tif file
    :return: the path to the .dnbr.npy file corresponding to that .tif
    """
    return tif_path.replace(".tif", ".dnbr.npy")

def visualise_dnbr(tif_path, error_size=(512, 512)):
    """
    Renders a saved dnbr confidence mask as a PIL

    :param tif_path: the relative path to a .tif file
    :return: A PIL visualisation of the .dnbr.npy saved confidence mask
    """
    path = get_npy_path(tif_path)
    if not os.path.exists(path):
        print("No .dnbr.npy found: {}".format(path))
        tile_w = 64
        tile = ([([1] * tile_w) + [0] * tile_w] * tile_w) + ([([0] * tile_w) + [1] * tile_w] * tile_w)
        reps = (math.ceil(error_size[0] / tile_w), math.ceil(error_size[1] / tile_w))
        conf_mask = np.tile(tile, reps)
    else:
        conf_mask = np.load(path)
    RGBA = [1, 0.5, 0, 1]
    ar = np.array([conf_mask * band for band in RGBA])
    return array_to_image(ar)


def get_conf_mask(tif_path):
    """
    Loads a saved dnbr confidence mask as a PIL

    :param tif_path: the relative path to a .tif file
    :return: A PIL visualisation of the .dnbr.npy saved confidence mask
    """
    path = get_npy_path(tif_path)
    if not os.path.exists(path):
        print("No .dnbr.npy found: {}".format(path))
        return np.zeros((1000, 1000))
    else:
        conf_mask = np.load(path)
        return conf_mask
